// Code generated by goyacc -o src/parser/spanner.go src/parser/spanner.go.y. DO NOT EDIT.
//line src/parser/spanner.go.y:2
package parser

import __yyfmt__ "fmt"

//line src/parser/spanner.go.y:2
//line src/parser/spanner.go.y:5
type yySymType struct {
	yys       int
	empty     struct{}
	str       string
	strs      []string
	col       Column
	cols      []Column
	LastToken int
}

const PRIMARY = 57346
const KEY = 57347
const ASC = 57348
const DESC = 57349
const INTERLEAVE = 57350
const IN = 57351
const PARENT = 57352
const ARRAY = 57353
const OPTIONS = 57354
const NOT = 57355
const NULL = 57356
const ON = 57357
const DELETE = 57358
const CASCADE = 57359
const NO = 57360
const ACTION = 57361
const MAX = 57362
const UNIQUE = 57363
const NULL_FILTERED = 57364
const STORING = 57365
const true = 57366
const null = 57367
const allow_commit_timestamp = 57368
const CREATE = 57369
const ALTER = 57370
const DROP = 57371
const DATABASE = 57372
const TABLE = 57373
const INDEX = 57374
const BOOL = 57375
const INT64 = 57376
const FLOAT64 = 57377
const STRING = 57378
const BYTES = 57379
const DATE = 57380
const TIMESTAMP = 57381
const database_id = 57382
const table_name = 57383
const column_name = 57384
const index_name = 57385
const decimal_value = 57386
const hex_value = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PRIMARY",
	"KEY",
	"ASC",
	"DESC",
	"INTERLEAVE",
	"IN",
	"PARENT",
	"ARRAY",
	"OPTIONS",
	"NOT",
	"NULL",
	"ON",
	"DELETE",
	"CASCADE",
	"NO",
	"ACTION",
	"MAX",
	"UNIQUE",
	"NULL_FILTERED",
	"STORING",
	"true",
	"null",
	"allow_commit_timestamp",
	"'('",
	"','",
	"')'",
	"';'",
	"CREATE",
	"ALTER",
	"DROP",
	"DATABASE",
	"TABLE",
	"INDEX",
	"BOOL",
	"INT64",
	"FLOAT64",
	"STRING",
	"BYTES",
	"DATE",
	"TIMESTAMP",
	"database_id",
	"table_name",
	"column_name",
	"index_name",
	"decimal_value",
	"hex_value",
	"'<'",
	"'>'",
	"'='",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 117

var yyAct = [...]int{

	92, 70, 69, 82, 68, 57, 46, 24, 28, 37,
	30, 31, 32, 33, 34, 35, 36, 109, 101, 55,
	71, 23, 105, 80, 47, 16, 15, 20, 6, 14,
	107, 106, 97, 58, 59, 30, 31, 32, 33, 34,
	35, 36, 11, 12, 75, 81, 75, 76, 21, 10,
	9, 8, 96, 67, 66, 61, 25, 98, 26, 94,
	65, 64, 62, 45, 44, 60, 19, 73, 89, 90,
	86, 74, 18, 108, 95, 41, 54, 83, 102, 103,
	88, 38, 43, 53, 72, 99, 63, 93, 78, 79,
	51, 50, 40, 2, 100, 7, 85, 91, 84, 104,
	17, 13, 87, 49, 77, 52, 42, 48, 5, 4,
	3, 1, 39, 56, 29, 27, 22,
}
var yyPact = [...]int{

	-3, -3, -1000, 21, 20, 19, 8, -1000, -1000, -1000,
	-1000, -18, -20, 50, -1000, -1000, 39, -9, -1000, -25,
	-40, 27, 30, -2, 66, 88, -25, 69, -1000, -1000,
	-1000, -1000, -1000, 37, 36, -1000, -1000, -44, -21, 83,
	85, -1000, 71, 62, -15, -15, -27, 35, -1000, -1000,
	77, 34, -1000, 33, -1000, 25, -1000, -1000, -1000, -1000,
	24, -47, -26, 74, -26, 45, -1000, -1000, -1000, 18,
	-1000, 82, -22, 16, -49, -26, 47, -1000, -1000, -1000,
	65, -1000, 44, -1000, 79, -1000, 32, -1000, 58, 23,
	3, 29, -1000, 76, -28, 61, -1000, -1000, 79, -23,
	2, -1000, -1000, 54, -1000, -1000, -1000, -29, -1000, -1000,
}
var yyPgo = [...]int{

	0, 116, 48, 115, 8, 114, 19, 113, 112, 1,
	2, 111, 93, 110, 109, 108, 107, 106, 105, 104,
	103, 102, 101, 100, 98, 97, 96, 94, 0,
}
var yyR1 = [...]int{

	0, 11, 11, 12, 12, 12, 13, 14, 2, 2,
	2, 1, 8, 10, 10, 9, 19, 19, 19, 16,
	16, 20, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 6, 6, 5, 18, 18, 18, 17, 17, 21,
	21, 21, 15, 22, 22, 23, 23, 24, 24, 26,
	27, 27, 25, 25, 25, 28, 7, 7,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 2, 2, 3, 8, 0, 1,
	3, 4, 5, 1, 3, 2, 0, 1, 1, 0,
	1, 5, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 1, 1, 4, 0, 6, 6, 0, 2, 0,
	3, 4, 12, 0, 1, 0, 1, 0, 1, 4,
	1, 3, 0, 1, 3, 3, 1, 1,
}
var yyChk = [...]int{

	-1000, -11, -12, -13, -14, -15, 31, -12, 30, 30,
	30, 34, 35, -22, 21, 44, 45, -23, 22, 27,
	36, -2, -1, 46, 47, 29, 28, -3, -4, -5,
	37, 38, 39, 40, 41, 42, 43, 11, 15, -8,
	4, -2, -17, 13, 27, 27, 50, 45, -16, -20,
	8, 5, -18, 12, 14, -6, -7, 20, 48, 49,
	-6, -4, 27, 9, 27, 27, 29, 29, 51, -10,
	-9, 46, 10, -10, 26, 28, 29, -19, 6, 7,
	45, 29, 52, -9, -24, -26, 23, -21, 15, 24,
	25, -25, -28, 8, 27, 16, 29, 29, 28, 9,
	-27, 46, 17, 18, -28, 45, 29, 28, 19, 46,
}
var yyDef = [...]int{

	0, -2, 1, 0, 0, 0, 43, 2, 3, 4,
	5, 0, 0, 45, 44, 6, 0, 0, 46, 8,
	0, 0, 9, 0, 0, 0, 8, 37, 22, 23,
	24, 25, 26, 0, 0, 29, 30, 0, 0, 19,
	0, 10, 34, 0, 0, 0, 0, 0, 7, 20,
	0, 0, 11, 0, 38, 0, 31, 32, 56, 57,
	0, 0, 0, 0, 0, 0, 27, 28, 33, 0,
	13, 16, 0, 0, 0, 0, 47, 15, 17, 18,
	39, 12, 0, 14, 52, 48, 0, 21, 0, 0,
	0, 42, 53, 0, 0, 0, 35, 36, 0, 0,
	0, 50, 40, 0, 54, 55, 49, 0, 41, 51,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	27, 29, 3, 3, 28, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 30,
	50, 52, 51,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:57
		{
			SetCreateDatabaseStatement(yylex, yyDollar[1].str, yyDollar[2].str, yyDollar[3].str)
		}
	case 7:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line src/parser/spanner.go.y:63
		{
			SetCreateTableStatement(yylex, yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[5].cols, yyDollar[7].strs)
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:69
		{
			yyVAL.cols = make([]Column, 0, 0)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:73
		{
			yyVAL.cols = make([]Column, 0, 1)
			yyVAL.cols = append(yyVAL.cols, yyDollar[1].col)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:78
		{
			yyVAL.cols = append(yyDollar[3].cols, yyDollar[1].col)
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:84
		{
			yyVAL.col = Column{Name: yyDollar[1].str, Type: yyDollar[2].str}
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line src/parser/spanner.go.y:90
		{
			yyVAL.strs = yyDollar[4].strs
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:96
		{
			yyVAL.strs = make([]string, 0, 1)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:101
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line src/parser/spanner.go.y:107
		{
			yyVAL.str = yyDollar[1].str
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:129
		{
			yyVAL.str = yyDollar[1].str
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:135
		{
			yyVAL.str = yyDollar[1].str
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:143
		{
			yyVAL.str = yyDollar[1].str
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:147
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:151
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:155
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:159
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:165
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:169
		{
			yyVAL.str = "2621440"
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:175
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:247
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
