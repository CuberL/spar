// Code generated by goyacc -o src/parser/spanner.go src/parser/spanner.go.y. DO NOT EDIT.
//line src/parser/spanner.go.y:2
package parser

import __yyfmt__ "fmt"

//line src/parser/spanner.go.y:2
//line src/parser/spanner.go.y:5
type yySymType struct {
	yys       int
	empty     struct{}
	boolean   bool
	str       string
	strs      []string
	col       Column
	cols      []Column
	key       Key
	keys      []Key
	LastToken int
}

const PRIMARY = 57346
const KEY = 57347
const ASC = 57348
const DESC = 57349
const INTERLEAVE = 57350
const IN = 57351
const PARENT = 57352
const ARRAY = 57353
const OPTIONS = 57354
const NOT = 57355
const NULL = 57356
const ON = 57357
const DELETE = 57358
const CASCADE = 57359
const NO = 57360
const ACTION = 57361
const MAX = 57362
const UNIQUE = 57363
const NULL_FILTERED = 57364
const STORING = 57365
const allow_commit_timestamp = 57366
const CREATE = 57367
const ALTER = 57368
const DROP = 57369
const DATABASE = 57370
const TABLE = 57371
const INDEX = 57372
const BOOL = 57373
const INT64 = 57374
const FLOAT64 = 57375
const STRING = 57376
const BYTES = 57377
const DATE = 57378
const TIMESTAMP = 57379
const database_id = 57380
const table_name = 57381
const column_name = 57382
const index_name = 57383
const decimal_value = 57384
const hex_value = 57385

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PRIMARY",
	"KEY",
	"ASC",
	"DESC",
	"INTERLEAVE",
	"IN",
	"PARENT",
	"ARRAY",
	"OPTIONS",
	"NOT",
	"NULL",
	"ON",
	"DELETE",
	"CASCADE",
	"NO",
	"ACTION",
	"MAX",
	"UNIQUE",
	"NULL_FILTERED",
	"STORING",
	"allow_commit_timestamp",
	"'('",
	"','",
	"')'",
	"';'",
	"CREATE",
	"ALTER",
	"DROP",
	"DATABASE",
	"TABLE",
	"INDEX",
	"BOOL",
	"INT64",
	"FLOAT64",
	"STRING",
	"BYTES",
	"DATE",
	"TIMESTAMP",
	"database_id",
	"table_name",
	"column_name",
	"index_name",
	"decimal_value",
	"hex_value",
	"'<'",
	"'>'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 109

var yyAct = [...]int{

	86, 68, 67, 66, 56, 46, 28, 24, 37, 30,
	31, 32, 33, 34, 35, 36, 54, 101, 6, 93,
	69, 23, 97, 77, 47, 16, 20, 15, 14, 10,
	57, 58, 30, 31, 32, 33, 34, 35, 36, 11,
	12, 99, 98, 72, 78, 72, 73, 88, 9, 8,
	65, 64, 25, 60, 21, 90, 26, 63, 61, 45,
	44, 19, 59, 82, 18, 100, 71, 94, 95, 89,
	84, 38, 53, 43, 79, 70, 91, 62, 87, 75,
	76, 41, 50, 51, 40, 2, 92, 7, 81, 85,
	80, 96, 83, 49, 52, 48, 5, 4, 3, 1,
	17, 13, 42, 39, 74, 55, 29, 27, 22,
}
var yyPact = [...]int{

	-11, -11, -1000, 21, 20, 1, 7, -1000, -1000, -1000,
	-1000, -15, -18, 42, -1000, -1000, 36, -8, -1000, -23,
	-38, 25, 30, -3, 56, 80, -23, 60, -1000, -1000,
	-1000, -1000, -1000, 35, 34, -1000, -1000, -43, -19, 74,
	78, -1000, -1000, 58, -16, -16, -26, 33, -1000, -1000,
	68, 32, -1000, -1000, 24, -1000, -1000, -1000, -1000, 23,
	-46, -24, 65, -24, -1000, -1000, -1000, 19, -1000, 73,
	-20, 17, -24, 40, -1000, -1000, -1000, 55, -1000, -1000,
	70, -1000, 22, -1000, 53, 29, -1000, 67, -25, 50,
	70, -21, 15, -1000, -1000, 46, -1000, -1000, -1000, -27,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 108, 54, 107, 6, 106, 16, 105, 104, 1,
	2, 103, 102, 101, 100, 99, 85, 98, 97, 96,
	95, 94, 93, 92, 90, 89, 88, 86, 0,
}
var yyR1 = [...]int{

	0, 15, 15, 16, 16, 16, 17, 18, 2, 2,
	2, 1, 11, 10, 10, 9, 8, 8, 8, 20,
	20, 22, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 6, 6, 5, 21, 12, 12, 23, 23, 23,
	19, 13, 13, 14, 14, 24, 24, 26, 27, 27,
	25, 25, 25, 28, 7, 7,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 2, 2, 3, 8, 0, 1,
	3, 4, 5, 1, 3, 2, 0, 1, 1, 0,
	1, 5, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 1, 1, 4, 0, 0, 2, 0, 3, 4,
	12, 0, 1, 0, 1, 0, 1, 4, 1, 3,
	0, 1, 3, 3, 1, 1,
}
var yyChk = [...]int{

	-1000, -15, -16, -17, -18, -19, 29, -16, 28, 28,
	28, 32, 33, -13, 21, 42, 43, -14, 22, 25,
	34, -2, -1, 44, 45, 27, 26, -3, -4, -5,
	35, 36, 37, 38, 39, 40, 41, 11, 15, -11,
	4, -2, -12, 13, 25, 25, 48, 43, -20, -22,
	8, 5, -21, 14, -6, -7, 20, 46, 47, -6,
	-4, 25, 9, 25, 27, 27, 49, -10, -9, 44,
	10, -10, 26, 27, -8, 6, 7, 43, 27, -9,
	-24, -26, 23, -23, 15, -25, -28, 8, 25, 16,
	26, 9, -27, 44, 17, 18, -28, 43, 27, 26,
	19, 44,
}
var yyDef = [...]int{

	0, -2, 1, 0, 0, 0, 41, 2, 3, 4,
	5, 0, 0, 43, 42, 6, 0, 0, 44, 8,
	0, 0, 9, 0, 0, 0, 8, 35, 22, 23,
	24, 25, 26, 0, 0, 29, 30, 0, 0, 19,
	0, 10, 34, 0, 0, 0, 0, 0, 7, 20,
	0, 0, 11, 36, 0, 31, 32, 54, 55, 0,
	0, 0, 0, 0, 27, 28, 33, 0, 13, 16,
	0, 0, 0, 45, 15, 17, 18, 37, 12, 14,
	50, 46, 0, 21, 0, 40, 51, 0, 0, 0,
	0, 0, 0, 48, 38, 0, 52, 53, 47, 0,
	39, 49,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	25, 27, 3, 3, 26, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 28,
	48, 3, 49,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:69
		{
			SetCreateDatabaseStatement(yylex, yyDollar[1].str, yyDollar[2].str, yyDollar[3].str)
		}
	case 7:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line src/parser/spanner.go.y:75
		{
			// TODO support cluster_opt
			SetCreateTableStatement(yylex, yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[5].cols, yyDollar[7].keys)
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:82
		{
			yyVAL.cols = make([]Column, 0, 0)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:86
		{
			yyVAL.cols = make([]Column, 0, 1)
			yyVAL.cols = append(yyVAL.cols, yyDollar[1].col)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:91
		{
			yyVAL.cols = append(yyDollar[3].cols, yyDollar[1].col)
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:97
		{
			yyVAL.col = Column{Name: yyDollar[1].str, Type: yyDollar[2].str, NotNull: yyDollar[3].boolean}
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line src/parser/spanner.go.y:103
		{
			yyVAL.keys = yyDollar[4].keys
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:109
		{
			yyVAL.keys = make([]Key, 0, 1)
			yyVAL.keys = append(yyVAL.keys, yyDollar[1].key)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line src/parser/spanner.go.y:114
		{
			yyVAL.keys = append(yyDollar[1].keys, yyDollar[3].key)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line src/parser/spanner.go.y:120
		{
			yyVAL.key = Key{Name: yyDollar[1].str, Order: yyDollar[2].str}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:126
		{
			yyVAL.str = "ASC"
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:130
		{
			yyVAL.str = yyDollar[1].str
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:134
		{
			yyVAL.str = yyDollar[1].str
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:147
		{
			yyVAL.str = yyDollar[1].str
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:161
		{
			yyVAL.str = yyDollar[1].str
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:165
		{
			yyVAL.str = yyDollar[1].str
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:169
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:173
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:177
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:181
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:187
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:191
		{
			yyVAL.str = "2621440"
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line src/parser/spanner.go.y:197
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:210
		{
			yyVAL.boolean = false
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line src/parser/spanner.go.y:214
		{
			yyVAL.boolean = true
		}
	case 40:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line src/parser/spanner.go.y:225
		{
			// TODO Support storing_clause_opt, interleave_clause_list
			SetCreateIndexStatement(yylex, yyDollar[1].str, yyDollar[4].str, yyDollar[5].str, yyDollar[2].boolean, yyDollar[3].boolean, yyDollar[7].str, yyDollar[9].keys)
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:232
		{
			yyVAL.boolean = false
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:236
		{
			yyVAL.boolean = true
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line src/parser/spanner.go.y:242
		{
			yyVAL.boolean = false
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:246
		{
			yyVAL.boolean = true
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:289
		{
			yyVAL.str = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line src/parser/spanner.go.y:293
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
